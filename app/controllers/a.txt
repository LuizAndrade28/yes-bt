def destroy
  @player = Player.find(params[:id])
  ActiveRecord::Base.transaction do
    @player.plays.each do |play|
      playid = play.id
      playplayers = PlayPlayer.where(play_id: playid).where.not(player_id: @player.id)

      playplayers.each do |playplayer|
        player_to_update = Player.find(playplayer.player_id)
        play_playplayer = Play.find(playplayer.play_id)

        # Aqui, substitu√≠mos 'player' por '@player'
        play_games_won = play_playplayer.dupla1.include?(@player.id) ? play_playplayer.dupla1_games : play_playplayer.dupla2_games
        play_games_lost = play_playplayer.dupla1.include?(@player.id) ? play_playplayer.dupla2_games : play_playplayer.dupla1_games

        player_to_update.games_won -= play_games_won
        if player_to_update.games_lost < 0
          player_to_update.games_lost += play_games_lost
        else
          player_to_update.games_lost -= play_games_lost
        end
        player_to_update.sets_won -= 1 if play_games_won == 6

        if player_to_update.save!
          playplayer.destroy!
        else
          raise ActiveRecord::Rollback
        end
      end

      # Destr√≥i o play se n√£o houver mais playplayers associados
      play.destroy! if play.play_players.empty?

      # Destr√≥i o match se n√£o houver mais plays associados
      Match.find(play.match_id).destroy! if Play.where(match_id: play.match_id).empty?
    end

    if @player.destroy!
      redirect_to root_path, notice: 'Jogador deletado com sucesso. üü¢'
    else
      redirect_to root_path, notice: 'Jogador n√£o foi deletado com sucesso. üî¥'
    end
  end
rescue => e
  Rails.logger.error "Erro ao deletar o player: #{e.message}"
  redirect_to root_path, notice: "Erro ao deletar o player: #{e.message}"
end
